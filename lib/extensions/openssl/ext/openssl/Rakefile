require 'fileutils'

def cmdrun(cmd, args=nil)
  args = '' if args.nil?
  args = args.join(' ') if args.is_a? Array

  cmdline = cmd + ' ' + args
  puts cmdline
  puts `#{cmdline}`
  return $? == 0
end

task :config do
  if ENV['ANDROID_API_LEVEL'] != nil
      $targetdir = ENV['TARGET_TEMP_DIR']
      $tempdir = ENV['TEMP_FILES_DIR']
      $builddir = ENV['BUILD_DIR']
      require File.dirname(__FILE__) + '/../../../../../platform/android/build/androidcommon.rb'

      setup_ndk(ENV['ANDROID_NDK'],ENV['ANDROID_API_LEVEL'])
      $arch = "android"
      $android = true
  else
    $bindir = ENV['PLATFORM_DEVELOPER_BIN_DIR']
    raise "PLATFORM_DEVELOPER_BIN_DIR is not set" if $bindir.nil?
    $sdkroot = ENV['SDKROOT']
    raise "SDKROOT is not set" if $sdkroot.nil?
    $builddir = ENV['BUILD_DIR']
    raise "BUILD_DIR is not set" if $builddir.nil?
    $targetdir = ENV['TARGET_TEMP_DIR']
    raise "TARGET_TEMP_DIR is not set" if $targetdir.nil?
    $tempdir = ENV['TEMP_FILES_DIR']
    raise "TEMP_FILES_DIR is not set" if $tempdir.nil?
    $arch = ENV['ARCHS']
    raise "ARCHS is not set" if $arch.nil?
    $gccbin = $bindir + '/gcc-4.0'
    $arbin = $bindir + '/ar'
  end

  $built = File.join($targetdir, '.built-openssl-' + $arch)
end
task :build => :config do
  build = false
  if File.exists? "platform"
    platform = IO.read("platform")
    puts "PLATFORM: #{platform}"
    if (platform =~ /android/ and not $android) or (platform =~/iphone/ and $android)
      build = true
    end
  end
  
  if not File.exists? $built or not File.exist? 'libssl.a' or not File.exist? 'libcrypto.a'
    build = true
  end

  puts "BUILD: #{build}"
  if build
      cmdrun('./config', "-openssldir=#{$builddir}") or exit 1
      cmdrun('make', 'clean')
      args = []
    if $android
      args << "CC=#{$gccbin}"
      args << "CFLAG=\"#{cc_def_args.join(" ")}\""
      args << "AR=\"#{$arbin} cr \""
      args << "RANLIB=\"#{$ranlib}\""
      args << "SHARED_LDFLAGS=\"-dynamiclib\""
    else
      args << "CC=#{$bindir}/gcc-4.0"
      args << "CFLAG=\"-D_DARWIN_C_SOURCE -arch #{$arch} -isysroot #{$sdkroot}\""
      args << "SHARED_LDFLAGS=\"-arch #{$arch} -dynamiclib\""
    end

    cmdrun('make', args) or exit 1
    File.open("platform","w") {|f| f.write($android ? "android" : "iphone" )}
    FileUtils.touch $built
  end

  cp 'libssl.a', $targetdir
  cp 'libcrypto.a', $targetdir
end

task :clean => :config do
  rm_f $built
  cmdrun('make', 'clean')
end

task :default => :build

